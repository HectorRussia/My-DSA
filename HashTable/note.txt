ใน TypeScript ถึงแม้จะไม่มี HashMap แบบใน Java โดยตรง 
แต่คุณสามารถใช้ Map หรือ Object ในการสร้างโครงสร้างข้อมูลที่คล้ายกับ HashMap ได้ โดย Map
ใน TypeScript มีฟังก์ชันที่สามารถใช้งานได้คล้ายกับ 
HashMap ใน Java เช่น get(), set(), และ has() เพื่อเช็คการมีอยู่ของคีย์

new Map<string, number>();

ฟังก์ชันที่ใช้งานกับ Map:

set(key, value): เพิ่มหรืออัพเดตค่าที่คีย์

get(key): คืนค่าที่เก็บอยู่ที่คีย์ หรือ undefined ถ้าคีย์ไม่มีอยู่

has(key): คืนค่า true ถ้าคีย์มีอยู่ใน Map

delete(key): ลบคีย์และค่าที่เกี่ยวข้องออกจาก Map

clear(): ลบข้อมูลทั้งหมดใน Map

size: ใช้ตรวจสอบจำนวนคู่คีย์-ค่าที่อยู่ใน Map

คุณสามารถใช้ Object แทน Map ได้ แต่ข้อดีของ Map คือ สามารถใช้คีย์ที่เป็นชนิดข้อมูลใดก็ได้ 
(เช่น object หรือฟังก์ชัน) และรักษาลำดับการแทรกข้อมูล 
ขณะที่ Object ใช้ได้แค่คีย์ที่เป็น string หรือ symbol เท่านั้น

Set ใน TypeScript

การสร้าง:
new Set<string>();

การเพิ่มสมาชิก:
set.add("Hello");
set.add("World");

การลบสมาชิก:
set.delete("Hello");

การตรวจสอบสมาชิก:
set.has("World");

ลักษณะการทำงาน:

Set ใน TypeScript เป็นคอลเลคชันที่ไม่อนุญาตให้มีค่าซ้ำ 
และจัดเก็บค่าด้วยลำดับที่เพิ่มเข้าไป
มีความยืดหยุ่นในการเก็บข้อมูลประเภทต่าง ๆ 
โดยใช้ Generics เช่น Set<number> หรือ Set<any>

Java มีประเภทที่เข้มงวดกว่ามาก

Java มีหลายประเภทของ Set (เช่น HashSet, TreeSet) 
ที่มีวิธีการจัดเรียงและเข้าถึงที่แตกต่างกัน
TypeScript มีเพียง Set ซึ่งทำงานในลักษณะที่เรียบง่ายและตรงไปตรงมา

ทั้ง Set ใน Java และ TypeScript เป็นคอลเลคชันที่ไม่มีค่าซ้ำ 